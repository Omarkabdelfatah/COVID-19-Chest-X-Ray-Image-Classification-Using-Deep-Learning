# -*- coding: utf-8 -*-
"""Covid-19-classification-keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GINVe6bv0sN8NgNHSX26VVzg5z9ESRWj
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip /content/drive/MyDrive/chest-xray-covid19-pneumonia_v1.zip.zip

import os,cv2
import numpy as np
from keras.utils import np_utils

data_path = '/content/train'

categories = os.listdir(data_path)
categories

labels = [i for i in range(len(categories))]
labels

label_dict = dict(zip(categories,labels))
label_dict

print(label_dict)
print(categories)
print(labels)

image_size = 224
data_train = [] #For Images
target_train = [] #For labels

# Load Images
for category in categories:
    folder_path = os.path.join(data_path,category)#/content/train/PNEUMONIA
    folder_path
    image_names = os.listdir(folder_path)
    image_names
    for image_name in image_names:
        image_path = os.path.join(folder_path,image_name)#/content/train/PNEUMONIA/image_name
        img = cv2.imread(image_path)

        try:
            #preprocessing
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #Convert image color to GRAY
            gray = cv2.GaussianBlur(gray, (5,5), 1) # remove the noise 
            resize = cv2.resize(gray,(image_size,image_size)) #resize the image(scaling)
            data_train.append(resize)
            target_train.append(label_dict[category])

        except Exception as e:
            print("Exception ",e)

#preprocessing
data_train=np.array(data_train)/255.0 #Normalization
data_train=np.reshape(data_train,(data_train.shape[0],image_size,image_size,1)) #reshape the images(scaling)
target_train=np.array(target_train)
print(target_train)

new_target_train=np_utils.to_categorical(target_train) #One Hot Encoding
new_target_train
print(new_target_train)

data_path = '/content/test'

categories = os.listdir(data_path)
categories

labels = [i for i in range(len(categories))]
labels

label_dict = dict(zip(categories,labels))
label_dict

print(label_dict)
print(categories)
print(labels)

image_size = 224
data_test = []
target_test = []


for category in categories:
    folder_path = os.path.join(data_path,category)
    folder_path
    image_names = os.listdir(folder_path)
    image_names
    for image_name in image_names:
        image_path = os.path.join(folder_path,image_name)
        img = cv2.imread(image_path)

        try:
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #Convert image color to GRAY
            gray = cv2.GaussianBlur(gray, (5,5), 1)
            resize = cv2.resize(gray,(image_size,image_size))
            data_test.append(resize)
            target_test.append(label_dict[category])

        except Exception as e:
            print("Exception ",e)

data_test=np.array(data_test)/255.0
data_test=np.reshape(data_test,(data_test.shape[0],image_size,image_size,1))
target_test=np.array(target_test)
print(target_test)

new_target_test=np_utils.to_categorical(target_test)
new_target_test
print(new_target_test)

data_path = '/content/val'

categories = os.listdir(data_path)
categories

labels = [i for i in range(len(categories))]
labels

label_dict = dict(zip(categories,labels))
label_dict

print(label_dict)
print(categories)
print(labels)

image_size = 224
data_val = []
target_val = []


for category in categories:
    folder_path = os.path.join(data_path,category)
    folder_path
    image_names = os.listdir(folder_path)
    image_names
    for image_name in image_names:
        image_path = os.path.join(folder_path,image_name)
        img = cv2.imread(image_path)

        try:
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #Convert image color to GRAY
            gray = cv2.GaussianBlur(gray, (5,5), 1)
            resize = cv2.resize(gray,(image_size,image_size))
            data_val.append(resize)
            target_val.append(label_dict[category])

        except Exception as e:
            print("Exception ",e)

data_val=np.array(data_val)/255.0
data_val=np.reshape(data_val,(data_val.shape[0],image_size,image_size,1))
target_val=np.array(target_val)
print(target_val)

new_target_val=np_utils.to_categorical(target_val)
new_target_val
print(new_target_val)

from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout, BatchNormalization
from tensorflow.keras.callbacks import EarlyStopping

model = Sequential()

model.add(Conv2D(filters=128, kernel_size=(3,3), input_shape=(224,224,1), activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=256, kernel_size=(3,3) ,activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dropout(0.5))

model.add(Dense(units=256, activation='relu'))

model.add(Dropout(0.5))

model.add(Dense(units=3, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

result = model.fit(data_train,new_target_train, epochs=20, validation_data=(data_val,new_target_val))

import matplotlib.pyplot as plt
loss = result.history['loss']
val_loss = result.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.plot(result.history['accuracy'])

import pandas as pd

losses = pd.DataFrame(model.history.history)

losses

model.evaluate(data_test,new_target_test)

model.save('covid_19_org1.h5')

pred = model.predict(data_test)

y_pred=np.argmax(pred, axis=1)
y_test=np.argmax(new_target_test, axis=1)

from sklearn.metrics import confusion_matrix

#Generate the confusion matrix
cf_matrix = confusion_matrix(y_test, y_pred)

print(cf_matrix)

df = pd.DataFrame(cf_matrix,index = categories,columns = categories)
df

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred,target_names=categories))

import seaborn as sn

plt.clf()
fig = plt.figure(figsize= (20,5))
ax = fig.add_subplot(111)

ax.set_aspect(1)

res = sn.heatmap(df, annot=True, fmt='.2f', cmap="YlGnBu", cbar=False)

plt.savefig("crosstab_pandas.png", bbox_inches='tight', dpi=100)

plt.show()

import pandas as pd 
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
df = pd.DataFrame()
df.loc['Test Results', 'Accuracy'] = accuracy_score(y_test, y_pred)
df.loc['Test Results', 'Precision'] = precision_score(y_test, y_pred, average="macro")
df.loc['Test Results', 'Recall'] = recall_score(y_test, y_pred, average="macro")
df.loc['Test Results', 'F1-score'] = f1_score(y_test, y_pred, average="macro")

df

from tensorflow import keras
model = keras.models.load_model('/content/covid_19_org1.h5')

import cv2
import numpy as np

import matplotlib.pyplot as plt

def pre(im):
  image = cv2.imread(im)
  gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY) #Convert image color to GRAY
  gray = cv2.GaussianBlur(gray, (5,5), 1)
  resize_image = cv2.resize(gray,(image_size,image_size))
  resize_image=np.array(resize_image)/255.0 #Normalization

  return resize_image

img = '/content/Viral Pneumonia-61.png'

image = pre(img)

pred = model.predict(image.reshape(1, 224, 224, 1), batch_size=1)

pred.argmax()

print("Model predicted : " + str(list(label_dict.keys())[list(label_dict.values()).index(pred.argmax())]))

